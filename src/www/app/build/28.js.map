{"version":3,"sources":["../../src/pages/login/login.module.ts","../../src/pages/login/login.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAyC;AACO;AACZ;AAUpC;IAAA;IAA8B,CAAC;IAAlB,eAAe;QAR3B,+DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,yDAAS;aACV;YACD,OAAO,EAAE;gBACP,sEAAe,CAAC,QAAQ,CAAC,yDAAS,CAAC;aACpC;SACF,CAAC;OACW,eAAe,CAAG;IAAD,sBAAC;CAAA;AAAH;;;;;;;;;;;;;;;;;;;;;;;;;;ACVD;AAGJ;AAC4C;AAGhC;AAEkC;AACX;AAO1D;IAUE,mBACS,OAAsB,EACtB,SAAoB,EACnB,IAAkB,EAClB,MAAuB,EACvB,IAAe,EACf,QAAkB,EACnB,GAAiB;QAP1B,iBAeC;QAdQ,YAAO,GAAP,OAAO,CAAe;QACtB,cAAS,GAAT,SAAS,CAAW;QACnB,SAAI,GAAJ,IAAI,CAAc;QAClB,WAAM,GAAN,MAAM,CAAiB;QACvB,SAAI,GAAJ,IAAI,CAAW;QACf,aAAQ,GAAR,QAAQ,CAAU;QACnB,QAAG,GAAH,GAAG,CAAc;QAfnB,UAAK,GAAW,EAAE;QAClB,aAAQ,GAAW,EAAE;QACrB,UAAK,GAAY,KAAK;QAIrB,cAAS,GAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAC;QAYvD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,cAAI;YAC5B,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACjB,IAAI,IAAI;gBAAE,KAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC;QAC5C,CAAC,CAAC;IAEJ,CAAC;IAED,kCAAc,GAAd;QAAA,iBAeC;QAbC,IAAM,GAAG,GAAG,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC;QAEvC,IAAI,GAAG,EAAE;YACP,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,cAAI;gBACtE,KAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC;YAClC,CAAC,CAAC,CAAC,KAAK,CAAC,aAAG;gBAEV,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;gBACrE,IAAI,IAAI;oBAAE,KAAI,CAAC,OAAO,CAAC,OAAO,CAAC,iBAAiB,CAAC;YAEnD,CAAC,CAAC;SACH;IAEH,CAAC;IAED,uCAAmB,GAAnB;QACE,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC;IACvC,CAAC;IAED,yCAAqB,GAArB;QACE,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC;IACzC,CAAC;IAED,sCAAkB,GAAlB,UAAmB,KAAa,EAAE,QAAgB;QAChD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,0BAA0B,CAAC,KAAK,EAAE,QAAQ,CAAC;IAC9D,CAAC;IAtDU,SAAS;QAJrB,gEAAS,CAAC;YACT,QAAQ,EAAE,YAAY;WACG;SAC1B,CAAC;6EAY+B;YACX,0EAAS;YACb,kEAAY;YACV,2EAAe;YACjB,gEAAS;YACL,kFAAQ;YACd,MAAY;OAjBf,SAAS,CAiTrB;IAAD,CAAC;AAAA;SAjTY,SAAS,e","file":"28.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { IonicPageModule } from 'ionic-angular';\r\nimport { LoginPage } from './login';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    LoginPage,\r\n  ],\r\n  imports: [\r\n    IonicPageModule.forChild(LoginPage),\r\n  ],\r\n})\r\nexport class LoginPageModule {}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/login/login.module.ts","import {\r\n  AngularFireAuth\r\n} from 'angularfire2/auth';\r\nimport {\r\n  Component\r\n} from '@angular/core';\r\nimport {\r\n  IonicPage,\r\n  NavController,\r\n  NavParams,\r\n  Platform,\r\n} from 'ionic-angular';\r\nimport {\r\n  BackProvider\r\n} from '../../providers/back/back';\r\n\r\nimport { AuthProvider as ZamnaAuth } from '../../providers/auth/auth'\r\nimport {InAppBrowser} from \"@ionic-native/in-app-browser\";\r\n\r\n@IonicPage()\r\n@Component({\r\n  selector: 'page-login',\r\n  templateUrl: 'login.html',\r\n})\r\nexport class LoginPage {\r\n\r\n  public email: string = ''\r\n  public password: string = ''\r\n  public admin: boolean = false\r\n\r\n  public user: any\r\n\r\n  private isBrowser: boolean = !this.platform.is('cordova')\r\n\r\n  constructor(\r\n    public navCtrl: NavController,\r\n    public navParams: NavParams,\r\n    private back: BackProvider,\r\n    private afAuth: AngularFireAuth,\r\n    private auth: ZamnaAuth,\r\n    private platform: Platform,\r\n    public iap: InAppBrowser,\r\n  ) {\r\n\r\n    this.auth.user$.subscribe(user => {\r\n      this.user = true;\r\n      if (user) this.navCtrl.setRoot('HomePage')\r\n    })\r\n\r\n  }\r\n\r\n  ionViewDidLoad() {\r\n\r\n    const uid = localStorage.getItem('uid')\r\n\r\n    if (uid) {\r\n      this.back.saveFcmToken(uid, localStorage.getItem('fcm_token')).then(data => {\r\n        this.navCtrl.setRoot('HomePage')\r\n      }).catch(err => {\r\n\r\n        const list = JSON.parse(localStorage.getItem('zamnademy-cache-list'))\r\n        if (list) this.navCtrl.setRoot('SimuladoresPage')\r\n\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n  loginGoogleFirebase() {\r\n    this.auth.loginGoogle(this.isBrowser)\r\n  }\r\n\r\n  loginFacebookFirebase() {\r\n    this.auth.loginFacebook(this.isBrowser)\r\n  }\r\n\r\n  loginEmailFirebase(email: string, password: string) {\r\n    this.afAuth.auth.signInWithEmailAndPassword(email, password)\r\n  }\r\n\r\n  /* login(email: string, password: string) {\r\n\r\n    const l = this.load.create({\r\n      content: 'Iniciando sesión...'\r\n    })\r\n    l.present()\r\n\r\n    this.back.login(email, password).subscribe(data => {\r\n      console.log(data)\r\n      if (data.err) {\r\n        this.toast.create({\r\n          message: data.err,\r\n          duration: 2000\r\n        }).present()\r\n        l.dismiss()\r\n      }\r\n      localStorage.setItem('user', JSON.stringify(data.user))\r\n      localStorage.setItem('token', data.token)\r\n      localStorage.setItem('uid', data.user.id)\r\n      this.back.saveFcmToken(data.user.id, localStorage.getItem('fcm_token')).then(data => console.log(data)).catch(err => this.toast.create({\r\n        message: 'No se pudo registrar tu dispositivo...',\r\n        duration: 2000\r\n      }).present())\r\n      this.navCtrl.setRoot('HomePage')\r\n      l.dismiss()\r\n    }, err => {\r\n      this.toast.create({\r\n        message: 'No pudimos inicar sesión con tu cuenta',\r\n        duration: 2000\r\n      }).present()\r\n      l.dismiss()\r\n    })\r\n\r\n  }\r\n\r\n  async loginFacebook() {\r\n\r\n    const l = this.load.create({\r\n      content: 'Iniciando sesión con Facebook...'\r\n    })\r\n    l.present()\r\n\r\n    try {\r\n      const res: FacebookLoginResponse = await this.fb.login(['public_profile', 'email'])\r\n      const fbProfile = await this.fb.api('me?fields=id,name,email,first_name,picture.width(720).height(720).as(picture_large)', [])\r\n      this.back.facebookApp(res.authResponse.accessToken, fbProfile.email).subscribe(data => {\r\n        if (data.err) return this.toast.create({\r\n          message: data.err,\r\n          duration: 2000\r\n        }).present()\r\n        localStorage.setItem('user', JSON.stringify(data.user))\r\n        localStorage.setItem('token', data.token)\r\n        localStorage.setItem('uid', data.user.id)\r\n        this.back.saveFcmToken(data.user.id, localStorage.getItem('fcm_token')).then(data => console.log(data)).catch(err => this.toast.create({\r\n          message: 'No se pudo registrar tu dispositivo...',\r\n          duration: 2000\r\n        }).present())\r\n        this.navCtrl.setRoot('HomePage')\r\n        l.dismiss()\r\n      }, err => {\r\n        this.toast.create({\r\n          message: 'No pudimos inicar sesión con tu Facebook',\r\n          duration: 2000\r\n        }).present()\r\n        l.dismiss()\r\n      })\r\n    } catch (error) {\r\n      l.dismiss()\r\n      this.toast.create({\r\n        message: 'No pudimos inicar sesión con tu Facebook',\r\n        duration: 2000\r\n      }).present()\r\n    }\r\n\r\n  } */\r\n\r\n  /*\r\n  async loginGoogle() {\r\n\r\n    const l = this.load.create({content: 'Iniciando sesión con Google...'})\r\n    //l.present()\r\n\r\n    try {\r\n      const res = await this.google.login({})\r\n      this.back.googleApp(res).subscribe(data => {\r\n        if (data.err) return this.toast.create({message: data.err, duration: 2000}).present()\r\n        localStorage.setItem('user', JSON.stringify(data.user))\r\n        localStorage.setItem('token', data.token)\r\n        localStorage.setItem('uid', data.user.id)\r\n        this.back.saveFcmToken(data.user.id, localStorage.getItem('fcm_token')).then(data => console.log(data)).catch(err => this.toast.create({message: 'No se pudo registrar tu dispositivo...', duration: 2000}).present())\r\n        this.navCtrl.setRoot('HomePage')\r\n        l.dismiss()\r\n      }, err => {\r\n        this.toast.create({message: err.message, duration: 2000}).present()  \r\n        l.dismiss()\r\n      })\r\n    } catch (error) {\r\n      this.toast.create({message: error.message, duration: 2000}).present()\r\n      l.dismiss()\r\n    }\r\n\r\n  }\r\n  */\r\n\r\n  /* async loginGoogle() {\r\n\r\n    const l = this.load.create({\r\n      content: 'Iniciando sesión con Google...'\r\n    })\r\n    l.present()\r\n\r\n    this.google.login({})\r\n      .then(res => {\r\n        this.handleGoogleLogin(res, l)\r\n      })\r\n      .catch(err => {\r\n        this.toast.create({message: err.message, duration: 2000}).present()\r\n        l.dismiss()\r\n      })\r\n\r\n  }\r\n\r\n  handleGoogleLogin(res, l) {\r\n    this.back.googleApp(res).subscribe(data => {\r\n      if (data.err) return this.toast.create({\r\n        message: data.err,\r\n        duration: 4000\r\n      }).present()\r\n      localStorage.setItem('user', JSON.stringify(data.user))\r\n      localStorage.setItem('token', data.token)\r\n      localStorage.setItem('uid', data.user.id)\r\n      this.back.saveFcmToken(data.user.id, localStorage.getItem('fcm_token')).then(data => console.log(data)).catch(err => this.toast.create({\r\n        message: 'No se pudo registrar tu dispositivo...',\r\n        duration: 2000\r\n      }).present())\r\n      this.navCtrl.setRoot('HomePage')\r\n      l.dismiss()\r\n    }, err => {\r\n      this.toast.create({\r\n        message: 'No pudimos inicar sesión con tu cuenta de Google',\r\n        duration: 2000\r\n      }).present()\r\n      l.dismiss()\r\n    })\r\n  } */\r\n\r\n  /* async loginGoogleFirebase() {\r\n\r\n    const l = this.load.create({\r\n      content: 'Iniciando sesión con Google...'\r\n    })\r\n    l.present()\r\n\r\n    const provider = new firebase.auth.GoogleAuthProvider()\r\n\r\n    if (!( < any > window).cordova) {\r\n      this.auth.auth.signInWithPopup(provider)\r\n        .then((res) => {\r\n\r\n          this.back.googleApp({\r\n            userId: res.user.uid,\r\n            givenName: res.user.displayName,\r\n            familyName: ' ',\r\n            email: res.user.email,\r\n            imageUrl: res.user.photoURL\r\n          }).subscribe(data => {\r\n            if (data.err) return this.toast.create({\r\n              message: data.err,\r\n              duration: 2000\r\n            }).present()\r\n            localStorage.setItem('user', JSON.stringify(data.user))\r\n            localStorage.setItem('token', data.token)\r\n            localStorage.setItem('uid', data.user.id)\r\n            this.back.saveFcmToken(data.user.id, localStorage.getItem('fcm_token')).then(data => console.log(data)).catch(err => this.toast.create({\r\n              message: 'No se pudo registrar tu dispositivo...',\r\n              duration: 2000\r\n            }).present())\r\n            this.navCtrl.setRoot('HomePage')\r\n            l.dismiss()\r\n          }, err => {\r\n            this.toast.create({\r\n              message: 'No pudimos inicar sesión con tu cuenta de Google',\r\n              duration: 2000\r\n            }).present()\r\n            l.dismiss()\r\n          })\r\n\r\n        })\r\n    } else {\r\n      this.auth.auth.signInWithRedirect(provider)\r\n        .then(() => {\r\n          this.auth.auth.getRedirectResult().then(res => {\r\n\r\n            this.back.googleApp({\r\n              userId: res.user.uid,\r\n              givenName: res.user.displayName,\r\n              familyName: ' ',\r\n              email: res.user.email,\r\n              imageUrl: res.user.photoURL\r\n            }).subscribe(data => {\r\n              if (data.err) return this.toast.create({\r\n                message: data.err,\r\n                duration: 2000\r\n              }).present()\r\n              localStorage.setItem('user', JSON.stringify(data.user))\r\n              localStorage.setItem('token', data.token)\r\n              localStorage.setItem('uid', data.user.id)\r\n              this.back.saveFcmToken(data.user.id, localStorage.getItem('fcm_token')).then(data => console.log(data)).catch(err => this.toast.create({\r\n                message: 'No se pudo registrar tu dispositivo...',\r\n                duration: 2000\r\n              }).present())\r\n              this.navCtrl.setRoot('HomePage')\r\n              l.dismiss()\r\n            }, err => {\r\n              this.toast.create({\r\n                message: 'No pudimos inicar sesión con tu cuenta de Google',\r\n                duration: 2000\r\n              }).present()\r\n              l.dismiss()\r\n            })\r\n\r\n          }).catch(function (error) {\r\n            l.dismiss()\r\n          })\r\n        })\r\n    }\r\n  } */\r\n\r\n  /* private firebaseAuth(provider: AuthProvider) {\r\n\r\n    if (!(<any>window).cordova) {\r\n      return this.afAuth.auth.signInWithPopup(provider)\r\n    } else {\r\n\r\n      return this.afAuth.auth.signInWithRedirect(provider)\r\n        .then(() => {\r\n          return this.afAuth.auth.getRedirectResult()\r\n            .then(result => {\r\n              this.toast.create({message: JSON.stringify(result.user), duration: 6000}).present()\r\n            })\r\n            .catch(err => {\r\n              this.toast.create({message: err.message, duration: 6000}).present()\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n  } */\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/login/login.ts"],"sourceRoot":""}